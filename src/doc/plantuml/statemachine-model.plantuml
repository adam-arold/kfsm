@startuml


class StateMachine<T : Enum<T>, E : Enum<E>, C> {
    initial(action: (C) -> T)
    transition(startState: T, event: E, endState: T, action: (C) -> Unit)
    transition(startState: T, event: E, action: (C) -> Unit)
    entry(currentState: T, action: (C) -> Unit)
    exit(currentState: T, action: (C) -> Unit)
    defaultAction(action: (C, T, E) -> Unit)
    defaultEntry(action: (C, T, T) -> Unit)
    defaultExit(action: (C, T, T) -> Unit)
    default(currentState: T, action: (C, T, E) -> Unit)
    create(context: C, initialState: T?) : StateMachineInstance<T,E,C>
    dsl()
}

class StateMachineInstance<T: Enum<T>, E: Enum<E>, C> {
    C: context
    fsm: StateMachine<T,E,C>
    event(event: E)
}

StateMachineInstance *--> StateMachine : fsm


@enduml
