@startuml

class C {
}
enum S {
}
enum E {
}

class StateMachine<S : Enum<S>, E : Enum<E>, C> {
    initial(action: (C) -> S)
    transition(startState: S, event: E, endState: S, action: (C) -> Unit)
    transition(startState: S, event: E, action: (C) -> Unit)
    entry(currentState: S, action: (C) -> Unit)
    exit(currentState: S, action: (C) -> Unit)
    defaultAction(action: (C, S, E) -> Unit)
    defaultEntry(action: (C, S, S) -> Unit)
    defaultExit(action: (C, S, S) -> Unit)
    default(currentState: S, action: (C, S, E) -> Unit)
    create(context: C, initialState: S?) : StateMachineInstance<S,E,C>
    stateMachine()
}

class StateMachineInstance<S: Enum<S>, E: Enum<E>, C> {
    C: context
    fsm: StateMachine<S,E,C>
    event(event: E)
}
StateMachine .left.> S : <<states>>
StateMachine .right.> E : <<events>>
StateMachine .up.> C : <<context>>

StateMachineInstance *---> StateMachine : fsm
StateMachineInstance *-left-> C : context

@enduml
