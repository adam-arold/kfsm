@startuml

class Context {
}
enum States {
}
enum Events {
}

class StateMachine<States : Enum<States>, Events : Enum<Events>, Context> {
    transition(startState: S, event: E, endState: S, action: C.(Any[]) -> Unit)
    create(context: Context, initialState: States?) : StateMachineInstance<States,Events,Context>
}

class StateMachineInstance<States: Enum<States>, Events: Enum<Events>, Context> {
    StateMachineInstance(context: Context, fsm: StateMachine<States,Events,Context>, initialState: S?)
    Context: context
    var currentState: S
    sendEvent(event: Events, Any[])
}

StateMachine ..left..> States : <<states>>
StateMachine ..right..> Events : <<events>>
StateMachine ..up.> Context : <<context>>

StateMachineInstance *---> StateMachine : fsm
StateMachineInstance *--left--> Context : context

@enduml
