import org.gradle.execution.ExcludedTaskFilteringBuildConfigurationAction
import org.gradle.internal.os.OperatingSystem
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.40'
}
repositories {
    jcenter()
    mavenCentral()
}
apply plugin: 'maven-publish'
group = "io.jumpco.open"

version = "0.1.0"
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

if(OperatingSystem.current().isWindows()) {
    profile += ',mingw'
}
if(OperatingSystem.current().isLinux()) {
    profile += ',linux'
}
if(OperatingSystem.current().isMacOsX()) {
    profile += ',macos'
}

kotlin {
    jvm()
    if(profile.contains('js')) {
        js {
            if(profile.contains('browser')) {
                browser {
                }
            }
            if(profile.contains("nodejs")) {
                nodejs {
                }
            }
        }
    }
    if(profile.contains('mingw')) {
        mingwX64('mingw')
    }
    if(profile.contains('linux')) {
        linuxX64('linux')
    }
    if(profile.contains('macos')) {
        macosX64('macos')
    }
    if(profile.contains('wasm')) {
        wasm32("wasm")
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation 'io.mockk:mockk-common:1.9.3'
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation 'io.mockk:mockk:1.9.3'
            }
        }
        if(profile.contains('js')) {
            jsMain {
                dependencies {
                    implementation kotlin('stdlib-js')
                }
            }
            jsTest {
                dependencies {
                    implementation kotlin('test-js')
                }
            }
        }
        if(profile.contains('mingw')) {
            mingwMain {
                kotlin.srcDirs = ['src/native/main']
            }
            mingwTest {
                kotlin.srcDirs = ['src/native/test']
            }
        }
        if(profile.contains('linux')) {
            linuxMain {
                kotlin.srcDirs = ['src/native/main']
            }
            linuxTest {
                kotlin.srcDirs = ['src/native/test']
            }
        }
        if(profile.contains('macos')) {
            macosMain {
                kotlin.srcDirs = ['src/native/main']
            }
            macosTest {
                kotlin.srcDirs = ['src/native/test']
            }
        }
        if(profile.contains('wasm')) {
            wasmMain {
                kotlin.srcDirs = ['src/native/main']
            }
            wasmTest {
                kotlin.srcDirs = ['src/native/test']
            }
        }
    }
}
/*
val dokka by tasks.getting(DokkaTask::class) {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
    includeNonPublic = false
    samples = listOf("src/commonTest/kotlin/io/jumpco/open/kfsm/turnstile.kt")
}
*/

/*
val dokkaJavadoc by tasks.creating(DokkaTask::class) {
    outputFormat = "javadoc"
    outputDirectory = "$buildDir/javadoc"
    samples = listOf("src/test/kotlin/io/jumpco/open/kfsm/turnstile.kt")
}
 */

/*val javadocJar by tasks.creating(Jar::class) {
    dependsOn(dokka)
    archiveClassifier.set("javadoc")
    from("$buildDir/javadoc")
}

tasks.named("assemble") {
    dependsOn(*//*sourcesJar,*//* javadocJar)
}*/
